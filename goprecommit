#!/usr/bin/env bash

[[ -z $GO ]] && GO="go"

if [[ ${GO##*/} == $GO ]]; then
	GOBIN="$( type -p "$GO" 2> /dev/null )"

	ret=$?
	if [[ $ret -gt 0 ]]; then
		echo "goprecommit: could not find '$GO' in path." 2>&1
		exit 1
	fi

	GO="$GOBIN"
fi

if ! [[ -x $GO ]]; then
	echo "goprecommit: $GO is not an executable file." 2>&1
	exit 1
fi

# Check for preqrequisites.
for prereq in "git"; do
	if ! type -p "${prereq}" > /dev/null 2>&1; then
		echo "goprecommit: ${prereq} must be installed and in the path." 2>&1
		exit 1
	fi
done

inrepo="$( git rev-parse --is-inside-work-tree 2>&1 )"
case "$inrepo" in
fatal*|false)
	echo "goprecommit: must be run from within a git repo."
	exit 1
;;
esac

VERBOSE="false"
SHORT="false"
QUIET="false"

LINT="true"
[[ $GOPRECOMMIT_NOLINT = "true" ]] && LINT="false"

while [[ $# -gt 0 ]]; do
	key="$1"
	val="${key#*=}"

	case $key in
	--cache)
		NOCACHE=""
	;;
	--nocache)
		NOCACHE="-count=1"
	;;
	--cache=*)
		case $val in
		true)
			NOCACHE=""
		;;
		false)
			NOCACHE="-count=1"
		;;
		*)
			echo "unknown value for $key: $val" >&2
			exit 1
		;;
		esac
	;;

	--lint)
		LINT="true"
	;;
	--nolint)
		LINT="false"
	;;
	--lint=*)
		case $val in
		true|false)
			LINT="$val"
		;;
		*)
			echo "unknown value for $key: $val" >&2
			exit 1
		;;
		esac
	;;

	--verbose)
		VERBOSE="true"
		SHORT="false"
		QUIET="false"
	;;
	--short)
		VERBOSE="false"
		SHORT="true"
		QUIET="false"
	;;
	--quiet)
		VERBOSE="false"
		SHORT="true"
		QUIET="true"
	;;
	--)
		shift
		break
	;;
	--*)
		echo "unknown flag $key" >&2
		exit 1
	;;
	*)
		break
	;;
	esac
	shift
done

function printf_verbose { true ; }
if [[ $VERBOSE == "true" ]]; then
	function printf_verbose { printf "$@" ; }
fi

function printf_not_short { printf "$@" ; }
if [[ $SHORT == "true" ]]; then
	function printf_not_short { true ; }
fi


function printf_not_quiet { printf "$@" ; }
if [[ $QUIET == "true" ]]; then
	function printf_not_quiet { true ; }
fi

function log_hide { printf_not_short "%s: \e[0;30;1m%s\e[m\n" "$1" "$2" ;  }	# BOLD dark gray on black
function log_ok { printf_not_short "%s: \e[0;92;1m%s\e[m\n" "$1" "$2" ; }	# BOLD green on black
function log_info { printf_not_short "%s: \e[0;94;1m%s\e[m\n" "$1" "$2" ; }	# BOLD blue on black
function log_notice { printf_not_short "%s: \e[0;96;1m%s\e[m\n" "$1" "$2" ; }	# BOLD cyan on black
function log_warning { printf_not_short "%s: \e[0;93;1m%s\e[m\n" "$1" "$2" ; }	# BOLD yellow on black
function log_error { printf_not_quiet "%s: \e[0;91;1m%s\e[m\n" "$1" "$2" ; }	# BOLD red on black

function gopath_bin_in_path {
	# Ensure $GOPATH/bin is in $PATH
	local path

	while read -r path; do
		if [[ "$path" == "${GOPATH}/bin" ]]; then
			return 0
			break
		fi
	done < <( echo $PATH | tr ':' '\n' )

	return 1
}

# If $GOPATH/bin is not in $PATH put it at the end.
gopath_bin_in_path || PATH="${PATH}:${GOPATH}/bin"

VERSION="$( "$GO" version | awk '//{ print $3 }' )"
VERSION="${VERSION#go}"

printf_verbose "found go version %s\n" "${VERSION}"

function go_install {
	local bin="$1"
	local pkg="$2"

	if type -p $bin > /dev/null 2>&1; then
		return 0
	fi

	case "${VERSION}" in
	1.[0123456789]|1.[0123456789].*|1.[0123456789][a-z]*)
		"$GO" get -u $pkg
	;;
	1.1[012345]|1.1[012345].*|1.1[012345][a-z]*)
		"$GO" get -u $pkg
	;;
	*)
		"$GO" install $pkg@latest
	;;
	esac

	if ! type -p $bin > /dev/null 2>&1; then
		echo "goprecommit: could not locate $bin even after installing $pkg" 2>&1
		return 1
	fi
}

go_install golint golang.org/x/lint/golint
go_install goimports golang.org/x/tools/cmd/goimports

readarray -t GOMODS < <( git ls-files | grep "\(^\|/\)go\.mod$" | grep -v "\(^\|/\)vendor/" )
printf_verbose "found go.mods=%d\n" ${#GOMODS[@]}

if [[ ${#GOMODS[@]} -lt 1 ]]; then
	log_warning "goprecommit" "Could not find any go.mod files."
	GOMODS+=(".")
fi

function precommit_module {
	local gomod="$1"
	printf_verbose "using go.mod=%s\n" $gomod

	cd "$(dirname $gomod)"

	local GO_MODULES="false"

	case "${VERSION}" in
	1.[0123456789]|1.[0123456789].*|1.[0123456789][a-z]*)
	;;
	1.10|1.10.*|1.10[a-z]*)
	;;
	1.11beta2)
		GO_MODULES="true"
		GO_MOD_TIDY="-sync"
	;;
	*)
		GO_MODULES="true"
		GO_MOD_TIDY="tidy"
	;;
	esac

	local MOD_PATH="${PWD#$GOPATH/src/}"
	printf_verbose "found MOD_PATH=%s\n" "$MOD_PATH"

	if [[ $MOD_PATH != $PWD || ! -r go.mod ]]; then
		printf_verbose "ignoring go modules…\n"
		unset GO_MODULES
		unset GO_MOD_TIDY
	fi

	TESTPKG_PREFIX="./"
	[[ "$GO_MODULES" == "true" ]] && TESTPKG_PREFIX=""

	if [[ "$GO_MODULES" == "true" && -r "go.mod" ]]; then
		MOD_BASE="$(awk '/^module/{print $2}' go.mod)"
		printf_verbose "found MOD_BASE=%s\n" "$MOD_BASE"
	fi

	printf_verbose "listing go files…\n"

	local file
	while read -r file; do
		if ! [[ -s "$file" ]]; then
			continue
		fi

		if [[ $( grep -c "^// Code generated .* DO NOT EDIT\.$" "$file" ) -gt 0 ]]; then
			continue
		fi

		GOFILES+=("$file")
	done < <( git ls-files | grep "\.go$" | grep -v "^vendor/" )

	printf_verbose "looking for subrepos…\n"

	local dir
	local -A SUBREPO
	while read -r dir; do
		dir="${dir#./}"

		if [[ -d "${dir}/.git" ]]; then
			printf_verbose "found subrepo: $dir\n"
			SUBREPO["$dir"]="true"
		fi

	done < <( find . -type d -not \( -name ".?*" -prune -o -name "vendor" -prune \) )

	if [[ "$GO_MODULES" == "true" ]]; then
		printf_verbose "go mod ${GO_MOD_TIDY}…\n"
		
		while read -r line; do
			line="$( echo "$line" | sed 's;^go: ;;' )"
			log_hide "go mod ${GO_MOD_TIDY}" "$line"
		done < <( "$GO" mod ${GO_MOD_TIDY} 2>&1 )
	fi

	printf_verbose "listing packages…\n"

	local pkg
	while read -r pkg; do
		pkg="$( echo "$pkg" | sed -e "s;\b\(_$PWD\|$MOD_PATH\)/;;g" -e "s;\b\(_$PWD\|$MOD_PATH\);.;g" )"

		if git check-ignore -q "$pkg"; then
			# If the project would be ignored in git, then we don't want to process it.
			printf_verbose "package is ignored in git: %s\n" "$pkg"
			continue
		fi

		if [[ ${SUBREPO["$pkg"]} == "true" ]]; then
			printf_verbose "package is in a subrepo: %s\n" "$pkg"
			continue
		fi

		GOPKGS+=("$pkg")
		TESTPKGS+=("${TESTPKG_PREFIX}$pkg")
	done < <( "$GO" list ./... | grep -v "/vendor/" )

	local -i ISSUES

	if [[ ${#GOFILES[@]} -gt 0 ]]; then
		printf_verbose "gofmt on files…\n"

		while read -r line; do
			log_error "gofmt" "$line"
			((ISSUES++))
		done < <(gofmt -l "${GOFILES[@]}")

		printf_verbose "goimports on files…\n"

		while read -r line; do
			log_error "goimports" "$line"
			((ISSUES++))
		done < <( goimports -l "${GOFILES[@]}" 2>&1 )
	fi

	if [[ "$LINT" != "false" ]]; then
		printf_verbose "golint on packages…\n"

		# golint complains if we reference all of the files together, so we need to do a per-package check.
		# We want to highlight any package that has golint errors, so we do each package separately.
		for pkg in "${GOPKGS[@]}"; do
			FLAG="false"

			pkg="${pkg#$MOD_BASE}"

			[[ "$pkg" == "/" ]] && pkg="."
			pkg="${pkg#/}"

			printf_verbose "$ golint $pkg\n"

			while read -r line; do
				if [[ "$FLAG" != "true" ]]; then
					log_error "golint" "$pkg"

					FLAG="true"
					((ISSUES++))
				fi

				line=${line#${PWD}/}
				log_warning "golint" "$line"
			done < <( golint "$pkg" 2>&1 )
		done
	fi

	printf_verbose "go test on packages…\n"

	# Exchange MOD_PATH for MOD_BASE if it is set.
	[[ -n "$MOD_BASE" ]] && MOD_PATH="$MOD_BASE"

	while IFS='' read -r line; do
		line="$( echo "$line" | sed -e "s;\b\(_$PWD\|$MOD_PATH\)/;;g" -e "s;\b\(_$PWD\|$MOD_PATH\);.;g" )"

		# Strip leading whitespace for easier matching.
		case "$( echo "$line" | sed -e 's/^[ \t]*//g' )" in 
		"go: "*)
			# go messages should be shadowed.
			log_hide "go test" "$line"
		;;
		ok*\(cached\))
			# Cached test results should be low-lighted.
			log_info "go test" "$line"
		;;
		ok*)
			log_ok "go test" "$line"
		;;
		PASS*)
			log_ok "go test" "$line"
		;;
		FAIL) ;;
		---\ FAIL*)
			# Failures should be highlighted as errors.
			log_error "go test" "$line"
			((ISSUES++))
		;;
		panic:*\[recovered\])
			# recovered panics should be shadowed.
			log_warning "go test" "$line"
		;;
		FAIL*|panic:*)
			# Failures should be highlighted as errors.
			log_error "go test" "$line"
			((ISSUES++))
		;;
		*cannot\ find\ package*)
			# Failures should be highlighted as errors.
			log_error "go test" "$line"
			((ISSUES++))
		;;
		\?*\[no\ test\ files\])
			pkg="$( echo "$line" | awk '//{ print $2 }' )"

			# If pkg has a leading underscore, then replace "_${PWD}/" with "./".
			if [[ "${pkg#_}" != "${pkg}" ]]; then
				pkg=".${pkg#_${PWD}}"
			fi

			pkgname="$( "$GO" list -f "{{.Name}}" $pkg 2>&1 )"
			case $pkgname in
			main)
				# If a main package does not have tests, then it should be shadowed.
				log_hide "go test" "$line"
			;;
			*)
				# Non-main packages with no test-files should be lightly highlighted.
				log_notice "go test" "$line"
			;;
			esac
		;;
		*)
			line="$( echo "$line" | sed -e "s;${PWD};.;" )"
			# Lines that we cannot recognize as anything else should be highlighted as warnings.
			log_warning "go test" "$line"
			((ISSUES++)) # should additionally break commit attempt.
		;;
		esac
	done < <( "$GO" test $NOCACHE "${TESTPKGS[@]}" 2>&1 )

	return $ISSUES
}

BLOCK_COMMIT="false"

for gomod in "${GOMODS[@]}"; do
	# run precommit_module in a subshell, since it can change directories.
	if !( precommit_module $gomod ); then
		BLOCK_COMMIT="true"
	fi
done

branch="$(git rev-parse --abbrev-ref HEAD)"
case $branch in
master|main)
	log_error "branch name" "Do not commit to ${branch}."
	BLOCK_COMMIT="true"
;;
esac

find * -type f -name "*.*" -exec check-noeol \{\} \+ || BLOCK_COMMIT="true"

[[ "$BLOCK_COMMIT" == "true" ]] && exit 1
exit 0
